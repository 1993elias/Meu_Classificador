<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Classificador de Imagens</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/tensorflow/4.10.0/tf.min.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }

        .container {
            max-width: 800px;
            margin: 0 auto;
            background: rgba(255, 255, 255, 0.95);
            border-radius: 20px;
            padding: 30px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
            backdrop-filter: blur(10px);
        }

        h1 {
            text-align: center;
            color: #333;
            margin-bottom: 30px;
            font-size: 2.5em;
            font-weight: 300;
        }

        .upload-area {
            border: 3px dashed #667eea;
            border-radius: 15px;
            padding: 40px;
            text-align: center;
            margin-bottom: 30px;
            transition: all 0.3s ease;
            cursor: pointer;
            position: relative;
            overflow: hidden;
        }

        .upload-area:hover {
            border-color: #764ba2;
            background: rgba(102, 126, 234, 0.05);
            transform: translateY(-2px);
        }

        .upload-area.dragover {
            border-color: #764ba2;
            background: rgba(102, 126, 234, 0.1);
            transform: scale(1.02);
        }

        .upload-icon {
            font-size: 4em;
            color: #667eea;
            margin-bottom: 20px;
        }

        .upload-text {
            font-size: 1.2em;
            color: #666;
            margin-bottom: 20px;
        }

        .file-input {
            display: none;
        }

        .btn {
            background: linear-gradient(45deg, #667eea, #764ba2);
            color: white;
            border: none;
            padding: 12px 30px;
            border-radius: 25px;
            font-size: 1.1em;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 5px 15px rgba(102, 126, 234, 0.3);
        }

        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(102, 126, 234, 0.4);
        }

        .preview-area {
            display: none;
            text-align: center;
            margin-bottom: 30px;
        }

        .preview-image {
            max-width: 100%;
            max-height: 400px;
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
            margin-bottom: 20px;
        }

        .results-area {
            display: none;
            background: rgba(255, 255, 255, 0.8);
            border-radius: 15px;
            padding: 25px;
            margin-top: 20px;
            border: 1px solid rgba(102, 126, 234, 0.2);
        }

        .result-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 15px 0;
            border-bottom: 1px solid rgba(0, 0, 0, 0.1);
        }

        .result-item:last-child {
            border-bottom: none;
        }

        .result-label {
            font-weight: 600;
            color: #333;
            font-size: 1.1em;
        }

        .result-confidence {
            background: linear-gradient(45deg, #667eea, #764ba2);
            color: white;
            padding: 8px 15px;
            border-radius: 20px;
            font-weight: bold;
        }

        .progress-bar {
            width: 100%;
            height: 8px;
            background: rgba(0, 0, 0, 0.1);
            border-radius: 4px;
            margin: 10px 0;
            overflow: hidden;
        }

        .progress-fill {
            height: 100%;
            background: linear-gradient(45deg, #667eea, #764ba2);
            border-radius: 4px;
            transition: width 0.3s ease;
        }

        .loading {
            display: none;
            text-align: center;
            padding: 20px;
        }

        .spinner {
            border: 4px solid rgba(102, 126, 234, 0.2);
            border-top: 4px solid #667eea;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
            margin: 0 auto 15px;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .status {
            text-align: center;
            margin: 20px 0;
            padding: 15px;
            border-radius: 10px;
            font-weight: 600;
        }

        .status.success {
            background: rgba(76, 175, 80, 0.1);
            color: #4CAF50;
            border: 1px solid rgba(76, 175, 80, 0.3);
        }

        .status.error {
            background: rgba(244, 67, 54, 0.1);
            color: #F44336;
            border: 1px solid rgba(244, 67, 54, 0.3);
        }

        @media (max-width: 768px) {
            .container {
                margin: 10px;
                padding: 20px;
            }
            
            h1 {
                font-size: 2em;
            }
            
            .upload-area {
                padding: 30px 20px;
            }
            
            .upload-icon {
                font-size: 3em;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>ü§ñ Classificador de Imagens</h1>
        
        <div class="status" id="status" style="display: none;"></div>
        
        <div class="upload-area" id="uploadArea">
            <div class="upload-icon">üì∏</div>
            <div class="upload-text">Clique aqui ou arraste uma imagem</div>
            <button class="btn" onclick="document.getElementById('fileInput').click()">
                Escolher Arquivo
            </button>
            <input type="file" id="fileInput" class="file-input" accept="image/*">
        </div>
        
        <div class="preview-area" id="previewArea">
            <img id="previewImage" class="preview-image" alt="Preview">
            <div>
                <button class="btn" onclick="classifyImage()" id="classifyBtn">
                    üîç Classificar Imagem
                </button>
            </div>
        </div>
        
        <div class="loading" id="loading">
            <div class="spinner"></div>
            <div>Carregando modelo...</div>
        </div>
        
        <div class="results-area" id="resultsArea">
            <h3 style="margin-bottom: 20px; color: #333;">üìä Resultados da Classifica√ß√£o</h3>
            <div id="results"></div>
        </div>
    </div>

    <script>
        let model = null;
        let currentImage = null;
        
        // Substitua essas classes pelas suas classes reais
        const classes = [
            'Classe 1',
            'Classe 2', 
            'Classe 3',
            'Classe 4',
            'Classe 5'
            // Adicione suas classes aqui
        ];
        
        // Configura√ß√µes do modelo - ajuste conforme necess√°rio
        const MODEL_CONFIG = {
            imageSize: 224, // Tamanho da imagem que seu modelo espera
            normalize: true, // Se deve normalizar os pixels (0-1)
            mean: [0.485, 0.456, 0.406], // Valores de normaliza√ß√£o (ImageNet padr√£o)
            std: [0.229, 0.224, 0.225]
        };

        // Inicializa√ß√£o
        window.addEventListener('load', async () => {
            await loadModel();
            setupEventListeners();
        });

        async function loadModel() {
            try {
                showStatus('Carregando modelo...', 'loading');
                document.getElementById('loading').style.display = 'block';
                
                // Carrega o modelo do GitHub
                // Substitua 'SEU_USUARIO' e 'SEU_REPOSITORIO' pelos seus dados
                const modelUrl = './model/model.json';
                model = await tf.loadLayersModel(modelUrl);
                
                showStatus('Modelo carregado com sucesso! ‚úÖ', 'success');
                document.getElementById('loading').style.display = 'none';
            } catch (error) {
                console.error('Erro ao carregar modelo:', error);
                showStatus('Erro ao carregar o modelo. Verifique se os arquivos est√£o corretos.', 'error');
                document.getElementById('loading').style.display = 'none';
            }
        }

        function setupEventListeners() {
            const uploadArea = document.getElementById('uploadArea');
            const fileInput = document.getElementById('fileInput');

            // Click para upload
            uploadArea.addEventListener('click', () => fileInput.click());

            // Drag and drop
            uploadArea.addEventListener('dragover', (e) => {
                e.preventDefault();
                uploadArea.classList.add('dragover');
            });

            uploadArea.addEventListener('dragleave', () => {
                uploadArea.classList.remove('dragover');
            });

            uploadArea.addEventListener('drop', (e) => {
                e.preventDefault();
                uploadArea.classList.remove('dragover');
                const files = e.dataTransfer.files;
                if (files.length > 0) {
                    handleFileSelect(files[0]);
                }
            });

            // File input change
            fileInput.addEventListener('change', (e) => {
                if (e.target.files.length > 0) {
                    handleFileSelect(e.target.files[0]);
                }
            });
        }

        function handleFileSelect(file) {
            if (!file.type.startsWith('image/')) {
                showStatus('Por favor, selecione um arquivo de imagem v√°lido.', 'error');
                return;
            }

            const reader = new FileReader();
            reader.onload = (e) => {
                const img = document.getElementById('previewImage');
                img.src = e.target.result;
                currentImage = img;
                
                document.getElementById('previewArea').style.display = 'block';
                document.getElementById('resultsArea').style.display = 'none';
                showStatus('Imagem carregada! Clique em "Classificar" para analisar.', 'success');
            };
            reader.readAsDataURL(file);
        }

        async function classifyImage() {
            if (!model || !currentImage) {
                showStatus('Modelo n√£o carregado ou imagem n√£o selecionada.', 'error');
                return;
            }

            try {
                showStatus('Classificando imagem...', 'loading');
                document.getElementById('classifyBtn').disabled = true;

                // Preprocessa a imagem
                const tensor = await preprocessImage(currentImage);
                
                // Faz a predi√ß√£o
                const predictions = await model.predict(tensor).data();
                
                // Mostra os resultados
                displayResults(predictions);
                
                // Limpa o tensor da mem√≥ria
                tensor.dispose();
                
                showStatus('Classifica√ß√£o conclu√≠da! ‚úÖ', 'success');
            } catch (error) {
                console.error('Erro na classifica√ß√£o:', error);
                showStatus('Erro durante a an√°lise do enfolhamento.', 'error');
            } finally {
                document.getElementById('classifyBtn').disabled = false;
            }
        }

        async function preprocessImage(imgElement) {
            return tf.tidy(() => {
                // Converte a imagem para tensor
                let tensor = tf.browser.fromPixels(imgElement);
                
                // Redimensiona para o tamanho esperado pelo modelo
                tensor = tf.image.resizeBilinear(tensor, [MODEL_CONFIG.imageSize, MODEL_CONFIG.imageSize]);
                
                // Normaliza os pixels (0-255 para 0-1)
                if (MODEL_CONFIG.normalize) {
                    tensor = tensor.div(255.0);
                }
                
                // Adiciona dimens√£o do batch
                tensor = tensor.expandDims(0);
                
                return tensor;
            });
        }

        function displayResults(predictions) {
            const resultsDiv = document.getElementById('results');
            const resultsArea = document.getElementById('resultsArea');
            
            // Combina predi√ß√µes com classes e ordena por confian√ßa
            const results = Array.from(predictions)
                .map((confidence, index) => ({
                    class: classes[index] || `Classe ${index + 1}`,
                    confidence: confidence
                }))
                .sort((a, b) => b.confidence - a.confidence);

            // Cria HTML dos resultados
            const resultsHTML = results
                .slice(0, 5) // Mostra apenas os top 5
                .map(result => `
                    <div class="result-item">
                        <span class="result-label">${result.class}</span>
                        <span class="result-confidence">
                            ${(result.confidence * 100).toFixed(1)}%
                        </span>
                    </div>
                    <div class="progress-bar">
                        <div class="progress-fill" style="width: ${result.confidence * 100}%"></div>
                    </div>
                `).join('');

            resultsDiv.innerHTML = resultsHTML;
            resultsArea.style.display = 'block';
        }

        function showStatus(message, type) {
            const statusDiv = document.getElementById('status');
            statusDiv.textContent = message;
            statusDiv.className = `status ${type}`;
            statusDiv.style.display = 'block';
            
            if (type === 'success') {
                setTimeout(() => {
                    statusDiv.style.display = 'none';
                }, 3000);
            }
        }
    </script>
</body>
</html>